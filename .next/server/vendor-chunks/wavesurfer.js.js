"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wavesurfer.js";
exports.ids = ["vendor-chunks/wavesurfer.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/decoder.js":
/*!****************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/decoder.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** Decode an array buffer into an audio buffer */ function decode(audioData, sampleRate) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const audioCtx = new AudioContext({\n            sampleRate\n        });\n        const decode = audioCtx.decodeAudioData(audioData);\n        return decode.finally(()=>audioCtx.close());\n    });\n}\n/** Normalize peaks to -1..1 */ function normalize(channelData) {\n    const firstChannel = channelData[0];\n    if (firstChannel.some((n)=>n > 1 || n < -1)) {\n        const length = firstChannel.length;\n        let max = 0;\n        for(let i = 0; i < length; i++){\n            const absN = Math.abs(firstChannel[i]);\n            if (absN > max) max = absN;\n        }\n        for (const channel of channelData){\n            for(let i = 0; i < length; i++){\n                channel[i] /= max;\n            }\n        }\n    }\n    return channelData;\n}\n/** Create an audio buffer from pre-decoded audio data */ function createBuffer(channelData, duration) {\n    // If a single array of numbers is passed, make it an array of arrays\n    if (typeof channelData[0] === \"number\") channelData = [\n        channelData\n    ];\n    // Normalize to -1..1\n    normalize(channelData);\n    return {\n        duration,\n        length: channelData[0].length,\n        sampleRate: channelData[0].length / duration,\n        numberOfChannels: channelData.length,\n        getChannelData: (i)=>channelData === null || channelData === void 0 ? void 0 : channelData[i],\n        copyFromChannel: AudioBuffer.prototype.copyFromChannel,\n        copyToChannel: AudioBuffer.prototype.copyToChannel\n    };\n}\nconst Decoder = {\n    decode,\n    createBuffer\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Decoder);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L2RlY29kZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFlBQVksU0FBSyxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBLGdEQUFnRCxHQUNoRCxTQUFTTyxPQUFPQyxTQUFTLEVBQUVDLFVBQVU7SUFDakMsT0FBT3JCLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDbkMsTUFBTXNCLFdBQVcsSUFBSUMsYUFBYTtZQUFFRjtRQUFXO1FBQy9DLE1BQU1GLFNBQVNHLFNBQVNFLGVBQWUsQ0FBQ0o7UUFDeEMsT0FBT0QsT0FBT00sT0FBTyxDQUFDLElBQU1ILFNBQVNJLEtBQUs7SUFDOUM7QUFDSjtBQUNBLDZCQUE2QixHQUM3QixTQUFTQyxVQUFVQyxXQUFXO0lBQzFCLE1BQU1DLGVBQWVELFdBQVcsQ0FBQyxFQUFFO0lBQ25DLElBQUlDLGFBQWFDLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxJQUFJLEtBQUtBLElBQUksQ0FBQyxJQUFJO1FBQzNDLE1BQU1DLFNBQVNILGFBQWFHLE1BQU07UUFDbEMsSUFBSUMsTUFBTTtRQUNWLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixRQUFRRSxJQUFLO1lBQzdCLE1BQU1DLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ1IsWUFBWSxDQUFDSyxFQUFFO1lBQ3JDLElBQUlDLE9BQU9GLEtBQ1BBLE1BQU1FO1FBQ2Q7UUFDQSxLQUFLLE1BQU1HLFdBQVdWLFlBQWE7WUFDL0IsSUFBSyxJQUFJTSxJQUFJLEdBQUdBLElBQUlGLFFBQVFFLElBQUs7Z0JBQzdCSSxPQUFPLENBQUNKLEVBQUUsSUFBSUQ7WUFDbEI7UUFDSjtJQUNKO0lBQ0EsT0FBT0w7QUFDWDtBQUNBLHVEQUF1RCxHQUN2RCxTQUFTVyxhQUFhWCxXQUFXLEVBQUVZLFFBQVE7SUFDdkMscUVBQXFFO0lBQ3JFLElBQUksT0FBT1osV0FBVyxDQUFDLEVBQUUsS0FBSyxVQUMxQkEsY0FBYztRQUFDQTtLQUFZO0lBQy9CLHFCQUFxQjtJQUNyQkQsVUFBVUM7SUFDVixPQUFPO1FBQ0hZO1FBQ0FSLFFBQVFKLFdBQVcsQ0FBQyxFQUFFLENBQUNJLE1BQU07UUFDN0JYLFlBQVlPLFdBQVcsQ0FBQyxFQUFFLENBQUNJLE1BQU0sR0FBR1E7UUFDcENDLGtCQUFrQmIsWUFBWUksTUFBTTtRQUNwQ1UsZ0JBQWdCLENBQUNSLElBQU1OLGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsV0FBVyxDQUFDTSxFQUFFO1FBQy9GUyxpQkFBaUJDLFlBQVlDLFNBQVMsQ0FBQ0YsZUFBZTtRQUN0REcsZUFBZUYsWUFBWUMsU0FBUyxDQUFDQyxhQUFhO0lBQ3REO0FBQ0o7QUFDQSxNQUFNQyxVQUFVO0lBQ1o1QjtJQUNBb0I7QUFDSjtBQUNBLGlFQUFlUSxPQUFPQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvbmUtd2hhdHNhcHAvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L2RlY29kZXIuanM/ZTliYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbi8qKiBEZWNvZGUgYW4gYXJyYXkgYnVmZmVyIGludG8gYW4gYXVkaW8gYnVmZmVyICovXG5mdW5jdGlvbiBkZWNvZGUoYXVkaW9EYXRhLCBzYW1wbGVSYXRlKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgYXVkaW9DdHggPSBuZXcgQXVkaW9Db250ZXh0KHsgc2FtcGxlUmF0ZSB9KTtcbiAgICAgICAgY29uc3QgZGVjb2RlID0gYXVkaW9DdHguZGVjb2RlQXVkaW9EYXRhKGF1ZGlvRGF0YSk7XG4gICAgICAgIHJldHVybiBkZWNvZGUuZmluYWxseSgoKSA9PiBhdWRpb0N0eC5jbG9zZSgpKTtcbiAgICB9KTtcbn1cbi8qKiBOb3JtYWxpemUgcGVha3MgdG8gLTEuLjEgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShjaGFubmVsRGF0YSkge1xuICAgIGNvbnN0IGZpcnN0Q2hhbm5lbCA9IGNoYW5uZWxEYXRhWzBdO1xuICAgIGlmIChmaXJzdENoYW5uZWwuc29tZSgobikgPT4gbiA+IDEgfHwgbiA8IC0xKSkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBmaXJzdENoYW5uZWwubGVuZ3RoO1xuICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYWJzTiA9IE1hdGguYWJzKGZpcnN0Q2hhbm5lbFtpXSk7XG4gICAgICAgICAgICBpZiAoYWJzTiA+IG1heClcbiAgICAgICAgICAgICAgICBtYXggPSBhYnNOO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgY2hhbm5lbCBvZiBjaGFubmVsRGF0YSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNoYW5uZWxbaV0gLz0gbWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFubmVsRGF0YTtcbn1cbi8qKiBDcmVhdGUgYW4gYXVkaW8gYnVmZmVyIGZyb20gcHJlLWRlY29kZWQgYXVkaW8gZGF0YSAqL1xuZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGNoYW5uZWxEYXRhLCBkdXJhdGlvbikge1xuICAgIC8vIElmIGEgc2luZ2xlIGFycmF5IG9mIG51bWJlcnMgaXMgcGFzc2VkLCBtYWtlIGl0IGFuIGFycmF5IG9mIGFycmF5c1xuICAgIGlmICh0eXBlb2YgY2hhbm5lbERhdGFbMF0gPT09ICdudW1iZXInKVxuICAgICAgICBjaGFubmVsRGF0YSA9IFtjaGFubmVsRGF0YV07XG4gICAgLy8gTm9ybWFsaXplIHRvIC0xLi4xXG4gICAgbm9ybWFsaXplKGNoYW5uZWxEYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgbGVuZ3RoOiBjaGFubmVsRGF0YVswXS5sZW5ndGgsXG4gICAgICAgIHNhbXBsZVJhdGU6IGNoYW5uZWxEYXRhWzBdLmxlbmd0aCAvIGR1cmF0aW9uLFxuICAgICAgICBudW1iZXJPZkNoYW5uZWxzOiBjaGFubmVsRGF0YS5sZW5ndGgsXG4gICAgICAgIGdldENoYW5uZWxEYXRhOiAoaSkgPT4gY2hhbm5lbERhdGEgPT09IG51bGwgfHwgY2hhbm5lbERhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoYW5uZWxEYXRhW2ldLFxuICAgICAgICBjb3B5RnJvbUNoYW5uZWw6IEF1ZGlvQnVmZmVyLnByb3RvdHlwZS5jb3B5RnJvbUNoYW5uZWwsXG4gICAgICAgIGNvcHlUb0NoYW5uZWw6IEF1ZGlvQnVmZmVyLnByb3RvdHlwZS5jb3B5VG9DaGFubmVsLFxuICAgIH07XG59XG5jb25zdCBEZWNvZGVyID0ge1xuICAgIGRlY29kZSxcbiAgICBjcmVhdGVCdWZmZXIsXG59O1xuZXhwb3J0IGRlZmF1bHQgRGVjb2RlcjtcbiJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJkZWNvZGUiLCJhdWRpb0RhdGEiLCJzYW1wbGVSYXRlIiwiYXVkaW9DdHgiLCJBdWRpb0NvbnRleHQiLCJkZWNvZGVBdWRpb0RhdGEiLCJmaW5hbGx5IiwiY2xvc2UiLCJub3JtYWxpemUiLCJjaGFubmVsRGF0YSIsImZpcnN0Q2hhbm5lbCIsInNvbWUiLCJuIiwibGVuZ3RoIiwibWF4IiwiaSIsImFic04iLCJNYXRoIiwiYWJzIiwiY2hhbm5lbCIsImNyZWF0ZUJ1ZmZlciIsImR1cmF0aW9uIiwibnVtYmVyT2ZDaGFubmVscyIsImdldENoYW5uZWxEYXRhIiwiY29weUZyb21DaGFubmVsIiwiQXVkaW9CdWZmZXIiLCJwcm90b3R5cGUiLCJjb3B5VG9DaGFubmVsIiwiRGVjb2RlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/draggable.js":
/*!******************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/draggable.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeDraggable: () => (/* binding */ makeDraggable)\n/* harmony export */ });\nfunction makeDraggable(element, onDrag, onStart, onEnd, threshold = 3, mouseButton = 0) {\n    if (!element) return ()=>void 0;\n    let unsubscribeDocument = ()=>void 0;\n    const onPointerDown = (event)=>{\n        if (event.button !== mouseButton) return;\n        event.preventDefault();\n        event.stopPropagation();\n        let startX = event.clientX;\n        let startY = event.clientY;\n        let isDragging = false;\n        const onPointerMove = (event)=>{\n            event.preventDefault();\n            event.stopPropagation();\n            const x = event.clientX;\n            const y = event.clientY;\n            const dx = x - startX;\n            const dy = y - startY;\n            startX = x;\n            startY = y;\n            if (isDragging || Math.abs(dx) > threshold || Math.abs(dy) > threshold) {\n                const rect = element.getBoundingClientRect();\n                const { left, top } = rect;\n                if (!isDragging) {\n                    onStart === null || onStart === void 0 ? void 0 : onStart(startX - left, startY - top);\n                    isDragging = true;\n                }\n                onDrag(dx, dy, x - left, y - top);\n            }\n        };\n        const onPointerUp = ()=>{\n            if (isDragging) {\n                onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n            }\n            unsubscribeDocument();\n        };\n        const onClick = (event)=>{\n            if (isDragging) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        const onTouchMove = (event)=>{\n            if (isDragging) {\n                event.preventDefault();\n            }\n        };\n        document.addEventListener(\"pointermove\", onPointerMove);\n        document.addEventListener(\"pointerup\", onPointerUp);\n        document.addEventListener(\"pointercancel\", onPointerUp);\n        document.addEventListener(\"touchmove\", onTouchMove, {\n            passive: false\n        });\n        document.addEventListener(\"click\", onClick, {\n            capture: true\n        });\n        unsubscribeDocument = ()=>{\n            document.removeEventListener(\"pointermove\", onPointerMove);\n            document.removeEventListener(\"pointerup\", onPointerUp);\n            document.removeEventListener(\"pointercancel\", onPointerUp);\n            document.removeEventListener(\"touchmove\", onTouchMove);\n            setTimeout(()=>{\n                document.removeEventListener(\"click\", onClick, {\n                    capture: true\n                });\n            }, 10);\n        };\n    };\n    element.addEventListener(\"pointerdown\", onPointerDown);\n    return ()=>{\n        unsubscribeDocument();\n        element.removeEventListener(\"pointerdown\", onPointerDown);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L2RyYWdnYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsY0FBY0MsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxZQUFZLENBQUMsRUFBRUMsY0FBYyxDQUFDO0lBQ3pGLElBQUksQ0FBQ0wsU0FDRCxPQUFPLElBQU0sS0FBSztJQUN0QixJQUFJTSxzQkFBc0IsSUFBTSxLQUFLO0lBQ3JDLE1BQU1DLGdCQUFnQixDQUFDQztRQUNuQixJQUFJQSxNQUFNQyxNQUFNLEtBQUtKLGFBQ2pCO1FBQ0pHLE1BQU1FLGNBQWM7UUFDcEJGLE1BQU1HLGVBQWU7UUFDckIsSUFBSUMsU0FBU0osTUFBTUssT0FBTztRQUMxQixJQUFJQyxTQUFTTixNQUFNTyxPQUFPO1FBQzFCLElBQUlDLGFBQWE7UUFDakIsTUFBTUMsZ0JBQWdCLENBQUNUO1lBQ25CQSxNQUFNRSxjQUFjO1lBQ3BCRixNQUFNRyxlQUFlO1lBQ3JCLE1BQU1PLElBQUlWLE1BQU1LLE9BQU87WUFDdkIsTUFBTU0sSUFBSVgsTUFBTU8sT0FBTztZQUN2QixNQUFNSyxLQUFLRixJQUFJTjtZQUNmLE1BQU1TLEtBQUtGLElBQUlMO1lBQ2ZGLFNBQVNNO1lBQ1RKLFNBQVNLO1lBQ1QsSUFBSUgsY0FBY00sS0FBS0MsR0FBRyxDQUFDSCxNQUFNaEIsYUFBYWtCLEtBQUtDLEdBQUcsQ0FBQ0YsTUFBTWpCLFdBQVc7Z0JBQ3BFLE1BQU1vQixPQUFPeEIsUUFBUXlCLHFCQUFxQjtnQkFDMUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRSxHQUFHSDtnQkFDdEIsSUFBSSxDQUFDUixZQUFZO29CQUNiZCxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVUsU0FBU2MsTUFBTVosU0FBU2E7b0JBQ2xGWCxhQUFhO2dCQUNqQjtnQkFDQWYsT0FBT21CLElBQUlDLElBQUlILElBQUlRLE1BQU1QLElBQUlRO1lBQ2pDO1FBQ0o7UUFDQSxNQUFNQyxjQUFjO1lBQ2hCLElBQUlaLFlBQVk7Z0JBQ1piLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQTtZQUNsRDtZQUNBRztRQUNKO1FBQ0EsTUFBTXVCLFVBQVUsQ0FBQ3JCO1lBQ2IsSUFBSVEsWUFBWTtnQkFDWlIsTUFBTUcsZUFBZTtnQkFDckJILE1BQU1FLGNBQWM7WUFDeEI7UUFDSjtRQUNBLE1BQU1vQixjQUFjLENBQUN0QjtZQUNqQixJQUFJUSxZQUFZO2dCQUNaUixNQUFNRSxjQUFjO1lBQ3hCO1FBQ0o7UUFDQXFCLFNBQVNDLGdCQUFnQixDQUFDLGVBQWVmO1FBQ3pDYyxTQUFTQyxnQkFBZ0IsQ0FBQyxhQUFhSjtRQUN2Q0csU0FBU0MsZ0JBQWdCLENBQUMsaUJBQWlCSjtRQUMzQ0csU0FBU0MsZ0JBQWdCLENBQUMsYUFBYUYsYUFBYTtZQUFFRyxTQUFTO1FBQU07UUFDckVGLFNBQVNDLGdCQUFnQixDQUFDLFNBQVNILFNBQVM7WUFBRUssU0FBUztRQUFLO1FBQzVENUIsc0JBQXNCO1lBQ2xCeUIsU0FBU0ksbUJBQW1CLENBQUMsZUFBZWxCO1lBQzVDYyxTQUFTSSxtQkFBbUIsQ0FBQyxhQUFhUDtZQUMxQ0csU0FBU0ksbUJBQW1CLENBQUMsaUJBQWlCUDtZQUM5Q0csU0FBU0ksbUJBQW1CLENBQUMsYUFBYUw7WUFDMUNNLFdBQVc7Z0JBQ1BMLFNBQVNJLG1CQUFtQixDQUFDLFNBQVNOLFNBQVM7b0JBQUVLLFNBQVM7Z0JBQUs7WUFDbkUsR0FBRztRQUNQO0lBQ0o7SUFDQWxDLFFBQVFnQyxnQkFBZ0IsQ0FBQyxlQUFlekI7SUFDeEMsT0FBTztRQUNIRDtRQUNBTixRQUFRbUMsbUJBQW1CLENBQUMsZUFBZTVCO0lBQy9DO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG9uZS13aGF0c2FwcC8uL25vZGVfbW9kdWxlcy93YXZlc3VyZmVyLmpzL2Rpc3QvZHJhZ2dhYmxlLmpzPzQ4ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG1ha2VEcmFnZ2FibGUoZWxlbWVudCwgb25EcmFnLCBvblN0YXJ0LCBvbkVuZCwgdGhyZXNob2xkID0gMywgbW91c2VCdXR0b24gPSAwKSB7XG4gICAgaWYgKCFlbGVtZW50KVxuICAgICAgICByZXR1cm4gKCkgPT4gdm9pZCAwO1xuICAgIGxldCB1bnN1YnNjcmliZURvY3VtZW50ID0gKCkgPT4gdm9pZCAwO1xuICAgIGNvbnN0IG9uUG9pbnRlckRvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gbW91c2VCdXR0b24pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBsZXQgc3RhcnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgbGV0IHN0YXJ0WSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICAgIGxldCBpc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IG9uUG9pbnRlck1vdmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYO1xuICAgICAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICAgICAgICBjb25zdCBkeCA9IHggLSBzdGFydFg7XG4gICAgICAgICAgICBjb25zdCBkeSA9IHkgLSBzdGFydFk7XG4gICAgICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICAgICAgc3RhcnRZID0geTtcbiAgICAgICAgICAgIGlmIChpc0RyYWdnaW5nIHx8IE1hdGguYWJzKGR4KSA+IHRocmVzaG9sZCB8fCBNYXRoLmFicyhkeSkgPiB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxlZnQsIHRvcCB9ID0gcmVjdDtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgb25TdGFydCA9PT0gbnVsbCB8fCBvblN0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblN0YXJ0KHN0YXJ0WCAtIGxlZnQsIHN0YXJ0WSAtIHRvcCk7XG4gICAgICAgICAgICAgICAgICAgIGlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkRyYWcoZHgsIGR5LCB4IC0gbGVmdCwgeSAtIHRvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG9uUG9pbnRlclVwID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBvbkVuZCA9PT0gbnVsbCB8fCBvbkVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25FbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVuc3Vic2NyaWJlRG9jdW1lbnQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25DbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvblRvdWNoTW92ZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uUG9pbnRlck1vdmUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBvblBvaW50ZXJVcCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCBvblBvaW50ZXJVcCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2ssIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgICAgICAgdW5zdWJzY3JpYmVEb2N1bWVudCA9ICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Qb2ludGVyTW92ZSk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBvblBvaW50ZXJVcCk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgb25Qb2ludGVyVXApO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyRG93bik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdW5zdWJzY3JpYmVEb2N1bWVudCgpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyRG93bik7XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJtYWtlRHJhZ2dhYmxlIiwiZWxlbWVudCIsIm9uRHJhZyIsIm9uU3RhcnQiLCJvbkVuZCIsInRocmVzaG9sZCIsIm1vdXNlQnV0dG9uIiwidW5zdWJzY3JpYmVEb2N1bWVudCIsIm9uUG9pbnRlckRvd24iLCJldmVudCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RhcnRYIiwiY2xpZW50WCIsInN0YXJ0WSIsImNsaWVudFkiLCJpc0RyYWdnaW5nIiwib25Qb2ludGVyTW92ZSIsIngiLCJ5IiwiZHgiLCJkeSIsIk1hdGgiLCJhYnMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInRvcCIsIm9uUG9pbnRlclVwIiwib25DbGljayIsIm9uVG91Y2hNb3ZlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsImNhcHR1cmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/draggable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/event-emitter.js":
/*!**********************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/event-emitter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/** A simple event emitter that can be used to listen to and emit events. */ class EventEmitter {\n    constructor(){\n        this.listeners = {};\n        /** Subscribe to an event. Returns an unsubscribe function. */ this.on = this.addEventListener;\n        /** Unsubscribe from an event */ this.un = this.removeEventListener;\n    }\n    /** Add an event listener */ addEventListener(event, listener, options) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = new Set();\n        }\n        this.listeners[event].add(listener);\n        if (options === null || options === void 0 ? void 0 : options.once) {\n            const unsubscribeOnce = ()=>{\n                this.removeEventListener(event, unsubscribeOnce);\n                this.removeEventListener(event, listener);\n            };\n            this.addEventListener(event, unsubscribeOnce);\n            return unsubscribeOnce;\n        }\n        return ()=>this.removeEventListener(event, listener);\n    }\n    removeEventListener(event, listener) {\n        var _a;\n        (_a = this.listeners[event]) === null || _a === void 0 ? void 0 : _a.delete(listener);\n    }\n    /** Subscribe to an event only once */ once(event, listener) {\n        return this.on(event, listener, {\n            once: true\n        });\n    }\n    /** Clear all events */ unAll() {\n        this.listeners = {};\n    }\n    /** Emit an event */ emit(eventName, ...args) {\n        if (this.listeners[eventName]) {\n            this.listeners[eventName].forEach((listener)=>listener(...args));\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventEmitter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L2V2ZW50LWVtaXR0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDBFQUEwRSxHQUMxRSxNQUFNQTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQztRQUNsQiw0REFBNEQsR0FDNUQsSUFBSSxDQUFDQyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxnQkFBZ0I7UUFDL0IsOEJBQThCLEdBQzlCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLElBQUksQ0FBQ0MsbUJBQW1CO0lBQ3RDO0lBQ0EsMEJBQTBCLEdBQzFCRixpQkFBaUJHLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUU7UUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQ1AsU0FBUyxDQUFDSyxNQUFNLEVBQUU7WUFDeEIsSUFBSSxDQUFDTCxTQUFTLENBQUNLLE1BQU0sR0FBRyxJQUFJRztRQUNoQztRQUNBLElBQUksQ0FBQ1IsU0FBUyxDQUFDSyxNQUFNLENBQUNJLEdBQUcsQ0FBQ0g7UUFDMUIsSUFBSUMsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFHLElBQUksRUFBRTtZQUNoRSxNQUFNQyxrQkFBa0I7Z0JBQ3BCLElBQUksQ0FBQ1AsbUJBQW1CLENBQUNDLE9BQU9NO2dCQUNoQyxJQUFJLENBQUNQLG1CQUFtQixDQUFDQyxPQUFPQztZQUNwQztZQUNBLElBQUksQ0FBQ0osZ0JBQWdCLENBQUNHLE9BQU9NO1lBQzdCLE9BQU9BO1FBQ1g7UUFDQSxPQUFPLElBQU0sSUFBSSxDQUFDUCxtQkFBbUIsQ0FBQ0MsT0FBT0M7SUFDakQ7SUFDQUYsb0JBQW9CQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNqQyxJQUFJTTtRQUNIQSxDQUFBQSxLQUFLLElBQUksQ0FBQ1osU0FBUyxDQUFDSyxNQUFNLE1BQU0sUUFBUU8sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHQyxNQUFNLENBQUNQO0lBQ2hGO0lBQ0Esb0NBQW9DLEdBQ3BDSSxLQUFLTCxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0wsRUFBRSxDQUFDSSxPQUFPQyxVQUFVO1lBQUVJLE1BQU07UUFBSztJQUNqRDtJQUNBLHFCQUFxQixHQUNyQkksUUFBUTtRQUNKLElBQUksQ0FBQ2QsU0FBUyxHQUFHLENBQUM7SUFDdEI7SUFDQSxrQkFBa0IsR0FDbEJlLEtBQUtDLFNBQVMsRUFBRSxHQUFHQyxJQUFJLEVBQUU7UUFDckIsSUFBSSxJQUFJLENBQUNqQixTQUFTLENBQUNnQixVQUFVLEVBQUU7WUFDM0IsSUFBSSxDQUFDaEIsU0FBUyxDQUFDZ0IsVUFBVSxDQUFDRSxPQUFPLENBQUMsQ0FBQ1osV0FBYUEsWUFBWVc7UUFDaEU7SUFDSjtBQUNKO0FBQ0EsaUVBQWVuQixZQUFZQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvbmUtd2hhdHNhcHAvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L2V2ZW50LWVtaXR0ZXIuanM/ZWNmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQSBzaW1wbGUgZXZlbnQgZW1pdHRlciB0aGF0IGNhbiBiZSB1c2VkIHRvIGxpc3RlbiB0byBhbmQgZW1pdCBldmVudHMuICovXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgICAgICAvKiogU3Vic2NyaWJlIHRvIGFuIGV2ZW50LiBSZXR1cm5zIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uLiAqL1xuICAgICAgICB0aGlzLm9uID0gdGhpcy5hZGRFdmVudExpc3RlbmVyO1xuICAgICAgICAvKiogVW5zdWJzY3JpYmUgZnJvbSBhbiBldmVudCAqL1xuICAgICAgICB0aGlzLnVuID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyO1xuICAgIH1cbiAgICAvKiogQWRkIGFuIGV2ZW50IGxpc3RlbmVyICovXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50XSA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0uYWRkKGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vbmNlKSB7XG4gICAgICAgICAgICBjb25zdCB1bnN1YnNjcmliZU9uY2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB1bnN1YnNjcmliZU9uY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgdW5zdWJzY3JpYmVPbmNlKTtcbiAgICAgICAgICAgIHJldHVybiB1bnN1YnNjcmliZU9uY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMubGlzdGVuZXJzW2V2ZW50XSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgfVxuICAgIC8qKiBTdWJzY3JpYmUgdG8gYW4gZXZlbnQgb25seSBvbmNlICovXG4gICAgb25jZShldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub24oZXZlbnQsIGxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICAgIC8qKiBDbGVhciBhbGwgZXZlbnRzICovXG4gICAgdW5BbGwoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgfVxuICAgIC8qKiBFbWl0IGFuIGV2ZW50ICovXG4gICAgZW1pdChldmVudE5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0uZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKC4uLmFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEV2ZW50RW1pdHRlcjtcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsImxpc3RlbmVycyIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwibGlzdGVuZXIiLCJvcHRpb25zIiwiU2V0IiwiYWRkIiwib25jZSIsInVuc3Vic2NyaWJlT25jZSIsIl9hIiwiZGVsZXRlIiwidW5BbGwiLCJlbWl0IiwiZXZlbnROYW1lIiwiYXJncyIsImZvckVhY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/event-emitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/fetcher.js":
/*!****************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/fetcher.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction watchProgress(response, progressCallback) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (!response.body || !response.headers) return;\n        const reader = response.body.getReader();\n        const contentLength = Number(response.headers.get(\"Content-Length\")) || 0;\n        let receivedLength = 0;\n        // Process the data\n        const processChunk = (value)=>__awaiter(this, void 0, void 0, function*() {\n                // Add to the received length\n                receivedLength += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                const percentage = Math.round(receivedLength / contentLength * 100);\n                progressCallback(percentage);\n            });\n        const read = ()=>__awaiter(this, void 0, void 0, function*() {\n                let data;\n                try {\n                    data = yield reader.read();\n                } catch (_a) {\n                    // Ignore errors because we can only handle the main response\n                    return;\n                }\n                // Continue reading data until done\n                if (!data.done) {\n                    processChunk(data.value);\n                    yield read();\n                }\n            });\n        read();\n    });\n}\nfunction fetchBlob(url, progressCallback, requestInit) {\n    return __awaiter(this, void 0, void 0, function*() {\n        // Fetch the resource\n        const response = yield fetch(url, requestInit);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch ${url}: ${response.status} (${response.statusText})`);\n        }\n        // Read the data to track progress\n        watchProgress(response.clone(), progressCallback);\n        return response.blob();\n    });\n}\nconst Fetcher = {\n    fetchBlob\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Fetcher);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L2ZldGNoZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFlBQVksU0FBSyxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBLFNBQVNPLGNBQWNDLFFBQVEsRUFBRUMsZ0JBQWdCO0lBQzdDLE9BQU9yQixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1FBQ25DLElBQUksQ0FBQ29CLFNBQVNFLElBQUksSUFBSSxDQUFDRixTQUFTRyxPQUFPLEVBQ25DO1FBQ0osTUFBTUMsU0FBU0osU0FBU0UsSUFBSSxDQUFDRyxTQUFTO1FBQ3RDLE1BQU1DLGdCQUFnQkMsT0FBT1AsU0FBU0csT0FBTyxDQUFDSyxHQUFHLENBQUMsc0JBQXNCO1FBQ3hFLElBQUlDLGlCQUFpQjtRQUNyQixtQkFBbUI7UUFDbkIsTUFBTUMsZUFBZSxDQUFDeEIsUUFBVU4sVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztnQkFDNUQsNkJBQTZCO2dCQUM3QjZCLGtCQUFrQixDQUFDdkIsVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLE1BQU15QixNQUFNLEtBQUs7Z0JBQ2xGLE1BQU1DLGFBQWFDLEtBQUtDLEtBQUssQ0FBQyxpQkFBa0JSLGdCQUFpQjtnQkFDakVMLGlCQUFpQlc7WUFDckI7UUFDQSxNQUFNRyxPQUFPLElBQU1uQyxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO2dCQUMvQyxJQUFJb0M7Z0JBQ0osSUFBSTtvQkFDQUEsT0FBTyxNQUFNWixPQUFPVyxJQUFJO2dCQUM1QixFQUNBLE9BQU9FLElBQUk7b0JBQ1AsNkRBQTZEO29CQUM3RDtnQkFDSjtnQkFDQSxtQ0FBbUM7Z0JBQ25DLElBQUksQ0FBQ0QsS0FBS3BCLElBQUksRUFBRTtvQkFDWmMsYUFBYU0sS0FBSzlCLEtBQUs7b0JBQ3ZCLE1BQU02QjtnQkFDVjtZQUNKO1FBQ0FBO0lBQ0o7QUFDSjtBQUNBLFNBQVNHLFVBQVVDLEdBQUcsRUFBRWxCLGdCQUFnQixFQUFFbUIsV0FBVztJQUNqRCxPQUFPeEMsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUNuQyxxQkFBcUI7UUFDckIsTUFBTW9CLFdBQVcsTUFBTXFCLE1BQU1GLEtBQUtDO1FBQ2xDLElBQUksQ0FBQ3BCLFNBQVNzQixFQUFFLEVBQUU7WUFDZCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRUosSUFBSSxFQUFFLEVBQUVuQixTQUFTd0IsTUFBTSxDQUFDLEVBQUUsRUFBRXhCLFNBQVN5QixVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3pGO1FBQ0Esa0NBQWtDO1FBQ2xDMUIsY0FBY0MsU0FBUzBCLEtBQUssSUFBSXpCO1FBQ2hDLE9BQU9ELFNBQVMyQixJQUFJO0lBQ3hCO0FBQ0o7QUFDQSxNQUFNQyxVQUFVO0lBQ1pWO0FBQ0o7QUFDQSxpRUFBZVUsT0FBT0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nsb25lLXdoYXRzYXBwLy4vbm9kZV9tb2R1bGVzL3dhdmVzdXJmZXIuanMvZGlzdC9mZXRjaGVyLmpzPzJhMGQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5mdW5jdGlvbiB3YXRjaFByb2dyZXNzKHJlc3BvbnNlLCBwcm9ncmVzc0NhbGxiYWNrKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5ib2R5IHx8ICFyZXNwb25zZS5oZWFkZXJzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpO1xuICAgICAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LUxlbmd0aCcpKSB8fCAwO1xuICAgICAgICBsZXQgcmVjZWl2ZWRMZW5ndGggPSAwO1xuICAgICAgICAvLyBQcm9jZXNzIHRoZSBkYXRhXG4gICAgICAgIGNvbnN0IHByb2Nlc3NDaHVuayA9ICh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gQWRkIHRvIHRoZSByZWNlaXZlZCBsZW5ndGhcbiAgICAgICAgICAgIHJlY2VpdmVkTGVuZ3RoICs9ICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUubGVuZ3RoKSB8fCAwO1xuICAgICAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IE1hdGgucm91bmQoKHJlY2VpdmVkTGVuZ3RoIC8gY29udGVudExlbmd0aCkgKiAxMDApO1xuICAgICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayhwZXJjZW50YWdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlYWQgPSAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgZGF0YTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHlpZWxkIHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXJyb3JzIGJlY2F1c2Ugd2UgY2FuIG9ubHkgaGFuZGxlIHRoZSBtYWluIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ29udGludWUgcmVhZGluZyBkYXRhIHVudGlsIGRvbmVcbiAgICAgICAgICAgIGlmICghZGF0YS5kb25lKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NodW5rKGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgICAgIHlpZWxkIHJlYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlYWQoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZldGNoQmxvYih1cmwsIHByb2dyZXNzQ2FsbGJhY2ssIHJlcXVlc3RJbml0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgLy8gRmV0Y2ggdGhlIHJlc291cmNlXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2godXJsLCByZXF1ZXN0SW5pdCk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoICR7dXJsfTogJHtyZXNwb25zZS5zdGF0dXN9ICgke3Jlc3BvbnNlLnN0YXR1c1RleHR9KWApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlYWQgdGhlIGRhdGEgdG8gdHJhY2sgcHJvZ3Jlc3NcbiAgICAgICAgd2F0Y2hQcm9ncmVzcyhyZXNwb25zZS5jbG9uZSgpLCBwcm9ncmVzc0NhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbiAgICB9KTtcbn1cbmNvbnN0IEZldGNoZXIgPSB7XG4gICAgZmV0Y2hCbG9iLFxufTtcbmV4cG9ydCBkZWZhdWx0IEZldGNoZXI7XG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5Iiwid2F0Y2hQcm9ncmVzcyIsInJlc3BvbnNlIiwicHJvZ3Jlc3NDYWxsYmFjayIsImJvZHkiLCJoZWFkZXJzIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwiY29udGVudExlbmd0aCIsIk51bWJlciIsImdldCIsInJlY2VpdmVkTGVuZ3RoIiwicHJvY2Vzc0NodW5rIiwibGVuZ3RoIiwicGVyY2VudGFnZSIsIk1hdGgiLCJyb3VuZCIsInJlYWQiLCJkYXRhIiwiX2EiLCJmZXRjaEJsb2IiLCJ1cmwiLCJyZXF1ZXN0SW5pdCIsImZldGNoIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJjbG9uZSIsImJsb2IiLCJGZXRjaGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/fetcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/player.js":
/*!***************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/player.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _event_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-emitter.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/event-emitter.js\");\n\nclass Player extends _event_emitter_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(options){\n        super();\n        this.isExternalMedia = false;\n        if (options.media) {\n            this.media = options.media;\n            this.isExternalMedia = true;\n        } else {\n            this.media = document.createElement(\"audio\");\n        }\n        // Controls\n        if (options.mediaControls) {\n            this.media.controls = true;\n        }\n        // Autoplay\n        if (options.autoplay) {\n            this.media.autoplay = true;\n        }\n        // Speed\n        if (options.playbackRate != null) {\n            this.onceMediaEvent(\"canplay\", ()=>{\n                if (options.playbackRate != null) {\n                    this.media.playbackRate = options.playbackRate;\n                }\n            });\n        }\n    }\n    onMediaEvent(event, callback, options) {\n        this.media.addEventListener(event, callback, options);\n        return ()=>this.media.removeEventListener(event, callback);\n    }\n    onceMediaEvent(event, callback) {\n        return this.onMediaEvent(event, callback, {\n            once: true\n        });\n    }\n    getSrc() {\n        return this.media.currentSrc || this.media.src || \"\";\n    }\n    revokeSrc() {\n        const src = this.getSrc();\n        if (src.startsWith(\"blob:\")) {\n            URL.revokeObjectURL(src);\n        }\n    }\n    setSrc(url, blob) {\n        const src = this.getSrc();\n        if (src === url) return;\n        this.revokeSrc();\n        const newSrc = blob instanceof Blob ? URL.createObjectURL(blob) : url;\n        this.media.src = newSrc;\n        this.media.load();\n    }\n    destroy() {\n        this.media.pause();\n        if (this.isExternalMedia) return;\n        this.media.remove();\n        this.revokeSrc();\n        this.media.src = \"\";\n        // Load resets the media element to its initial state\n        this.media.load();\n    }\n    setMediaElement(element) {\n        this.media = element;\n    }\n    /** Start playing the audio */ play() {\n        return this.media.play();\n    }\n    /** Pause the audio */ pause() {\n        this.media.pause();\n    }\n    /** Check if the audio is playing */ isPlaying() {\n        return !this.media.paused && !this.media.ended;\n    }\n    /** Jumpt to a specific time in the audio (in seconds) */ setTime(time) {\n        this.media.currentTime = time;\n    }\n    /** Get the duration of the audio in seconds */ getDuration() {\n        return this.media.duration;\n    }\n    /** Get the current audio position in seconds */ getCurrentTime() {\n        return this.media.currentTime;\n    }\n    /** Get the audio volume */ getVolume() {\n        return this.media.volume;\n    }\n    /** Set the audio volume */ setVolume(volume) {\n        this.media.volume = volume;\n    }\n    /** Get the audio muted state */ getMuted() {\n        return this.media.muted;\n    }\n    /** Mute or unmute the audio */ setMuted(muted) {\n        this.media.muted = muted;\n    }\n    /** Get the playback speed */ getPlaybackRate() {\n        return this.media.playbackRate;\n    }\n    /** Set the playback speed, pass an optional false to NOT preserve the pitch */ setPlaybackRate(rate, preservePitch) {\n        // preservePitch is true by default in most browsers\n        if (preservePitch != null) {\n            this.media.preservesPitch = preservePitch;\n        }\n        this.media.playbackRate = rate;\n    }\n    /** Get the HTML media element */ getMediaElement() {\n        return this.media;\n    }\n    /** Set a sink id to change the audio output device */ setSinkId(sinkId) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId\n        const media = this.media;\n        return media.setSinkId(sinkId);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/renderer.js":
/*!*****************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/renderer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _draggable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./draggable.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/draggable.js\");\n/* harmony import */ var _event_emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event-emitter.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/event-emitter.js\");\n\n\nclass Renderer extends _event_emitter_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(options, audioElement){\n        super();\n        this.timeouts = [];\n        this.isScrolling = false;\n        this.audioData = null;\n        this.resizeObserver = null;\n        this.isDragging = false;\n        this.options = options;\n        const parent = this.parentFromOptionsContainer(options.container);\n        this.parent = parent;\n        const [div, shadow] = this.initHtml();\n        parent.appendChild(div);\n        this.container = div;\n        this.scrollContainer = shadow.querySelector(\".scroll\");\n        this.wrapper = shadow.querySelector(\".wrapper\");\n        this.canvasWrapper = shadow.querySelector(\".canvases\");\n        this.progressWrapper = shadow.querySelector(\".progress\");\n        this.cursor = shadow.querySelector(\".cursor\");\n        if (audioElement) {\n            shadow.appendChild(audioElement);\n        }\n        this.initEvents();\n    }\n    parentFromOptionsContainer(container) {\n        let parent;\n        if (typeof container === \"string\") {\n            parent = document.querySelector(container);\n        } else if (container instanceof HTMLElement) {\n            parent = container;\n        }\n        if (!parent) {\n            throw new Error(\"Container not found\");\n        }\n        return parent;\n    }\n    initEvents() {\n        const getClickPosition = (e)=>{\n            const rect = this.wrapper.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientX - rect.left;\n            const relativeX = x / rect.width;\n            const relativeY = y / rect.height;\n            return [\n                relativeX,\n                relativeY\n            ];\n        };\n        // Add a click listener\n        this.wrapper.addEventListener(\"click\", (e)=>{\n            const [x, y] = getClickPosition(e);\n            this.emit(\"click\", x, y);\n        });\n        // Add a double click listener\n        this.wrapper.addEventListener(\"dblclick\", (e)=>{\n            const [x, y] = getClickPosition(e);\n            this.emit(\"dblclick\", x, y);\n        });\n        // Drag\n        if (this.options.dragToSeek) {\n            this.initDrag();\n        }\n        // Add a scroll listener\n        this.scrollContainer.addEventListener(\"scroll\", ()=>{\n            const { scrollLeft, scrollWidth, clientWidth } = this.scrollContainer;\n            const startX = scrollLeft / scrollWidth;\n            const endX = (scrollLeft + clientWidth) / scrollWidth;\n            this.emit(\"scroll\", startX, endX);\n        });\n        // Re-render the waveform on container resize\n        const delay = this.createDelay(100);\n        this.resizeObserver = new ResizeObserver(()=>{\n            delay(()=>this.reRender());\n        });\n        this.resizeObserver.observe(this.scrollContainer);\n    }\n    initDrag() {\n        (0,_draggable_js__WEBPACK_IMPORTED_MODULE_0__.makeDraggable)(this.wrapper, // On drag\n        (_, __, x)=>{\n            this.emit(\"drag\", Math.max(0, Math.min(1, x / this.wrapper.getBoundingClientRect().width)));\n        }, // On start drag\n        ()=>this.isDragging = true, // On end drag\n        ()=>this.isDragging = false);\n    }\n    getHeight() {\n        const defaultHeight = 128;\n        if (this.options.height == null) return defaultHeight;\n        if (!isNaN(Number(this.options.height))) return Number(this.options.height);\n        if (this.options.height === \"auto\") return this.parent.clientHeight || defaultHeight;\n        return defaultHeight;\n    }\n    initHtml() {\n        const div = document.createElement(\"div\");\n        const shadow = div.attachShadow({\n            mode: \"open\"\n        });\n        shadow.innerHTML = `\n      <style>\n        :host {\n          user-select: none;\n          min-width: 1px;\n        }\n        :host audio {\n          display: block;\n          width: 100%;\n        }\n        :host .scroll {\n          overflow-x: auto;\n          overflow-y: hidden;\n          width: 100%;\n          position: relative;\n        }\n        :host .noScrollbar {\n          scrollbar-color: transparent;\n          scrollbar-width: none;\n        }\n        :host .noScrollbar::-webkit-scrollbar {\n          display: none;\n          -webkit-appearance: none;\n        }\n        :host .wrapper {\n          position: relative;\n          overflow: visible;\n          z-index: 2;\n        }\n        :host .canvases {\n          min-height: ${this.getHeight()}px;\n        }\n        :host .canvases > div {\n          position: relative;\n        }\n        :host canvas {\n          display: block;\n          position: absolute;\n          top: 0;\n          image-rendering: pixelated;\n        }\n        :host .progress {\n          pointer-events: none;\n          position: absolute;\n          z-index: 2;\n          top: 0;\n          left: 0;\n          width: 0;\n          height: 100%;\n          overflow: hidden;\n        }\n        :host .progress > div {\n          position: relative;\n        }\n        :host .cursor {\n          pointer-events: none;\n          position: absolute;\n          z-index: 5;\n          top: 0;\n          left: 0;\n          height: 100%;\n          border-radius: 2px;\n        }\n      </style>\n\n      <div class=\"scroll\" part=\"scroll\">\n        <div class=\"wrapper\" part=\"wrapper\">\n          <div class=\"canvases\"></div>\n          <div class=\"progress\" part=\"progress\"></div>\n          <div class=\"cursor\" part=\"cursor\"></div>\n        </div>\n      </div>\n    `;\n        return [\n            div,\n            shadow\n        ];\n    }\n    /** Wavesurfer itself calls this method. Do not call it manually. */ setOptions(options) {\n        if (this.options.container !== options.container) {\n            const newParent = this.parentFromOptionsContainer(options.container);\n            newParent.appendChild(this.container);\n            this.parent = newParent;\n        }\n        if (options.dragToSeek && !this.options.dragToSeek) {\n            this.initDrag();\n        }\n        this.options = options;\n        // Re-render the waveform\n        this.reRender();\n    }\n    getWrapper() {\n        return this.wrapper;\n    }\n    getScroll() {\n        return this.scrollContainer.scrollLeft;\n    }\n    destroy() {\n        var _a;\n        this.container.remove();\n        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n    }\n    createDelay(delayMs = 10) {\n        const context = {};\n        this.timeouts.push(context);\n        return (callback)=>{\n            context.timeout && clearTimeout(context.timeout);\n            context.timeout = setTimeout(callback, delayMs);\n        };\n    }\n    // Convert array of color values to linear gradient\n    convertColorValues(color) {\n        if (!Array.isArray(color)) return color || \"\";\n        if (color.length < 2) return color[0] || \"\";\n        const canvasElement = document.createElement(\"canvas\");\n        const ctx = canvasElement.getContext(\"2d\");\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvasElement.height);\n        const colorStopPercentage = 1 / (color.length - 1);\n        color.forEach((color, index)=>{\n            const offset = index * colorStopPercentage;\n            gradient.addColorStop(offset, color);\n        });\n        return gradient;\n    }\n    renderBarWaveform(channelData, options, ctx, vScale) {\n        const topChannel = channelData[0];\n        const bottomChannel = channelData[1] || channelData[0];\n        const length = topChannel.length;\n        const { width, height } = ctx.canvas;\n        const halfHeight = height / 2;\n        const pixelRatio = window.devicePixelRatio || 1;\n        const barWidth = options.barWidth ? options.barWidth * pixelRatio : 1;\n        const barGap = options.barGap ? options.barGap * pixelRatio : options.barWidth ? barWidth / 2 : 0;\n        const barRadius = options.barRadius || 0;\n        const barIndexScale = width / (barWidth + barGap) / length;\n        const rectFn = barRadius && \"roundRect\" in ctx ? \"roundRect\" : \"rect\";\n        ctx.beginPath();\n        let prevX = 0;\n        let maxTop = 0;\n        let maxBottom = 0;\n        for(let i = 0; i <= length; i++){\n            const x = Math.round(i * barIndexScale);\n            if (x > prevX) {\n                const topBarHeight = Math.round(maxTop * halfHeight * vScale);\n                const bottomBarHeight = Math.round(maxBottom * halfHeight * vScale);\n                const barHeight = topBarHeight + bottomBarHeight || 1;\n                // Vertical alignment\n                let y = halfHeight - topBarHeight;\n                if (options.barAlign === \"top\") {\n                    y = 0;\n                } else if (options.barAlign === \"bottom\") {\n                    y = height - barHeight;\n                }\n                ctx[rectFn](prevX * (barWidth + barGap), y, barWidth, barHeight, barRadius);\n                prevX = x;\n                maxTop = 0;\n                maxBottom = 0;\n            }\n            const magnitudeTop = Math.abs(topChannel[i] || 0);\n            const magnitudeBottom = Math.abs(bottomChannel[i] || 0);\n            if (magnitudeTop > maxTop) maxTop = magnitudeTop;\n            if (magnitudeBottom > maxBottom) maxBottom = magnitudeBottom;\n        }\n        ctx.fill();\n        ctx.closePath();\n    }\n    renderLineWaveform(channelData, _options, ctx, vScale) {\n        const drawChannel = (index)=>{\n            const channel = channelData[index] || channelData[0];\n            const length = channel.length;\n            const { height } = ctx.canvas;\n            const halfHeight = height / 2;\n            const hScale = ctx.canvas.width / length;\n            ctx.moveTo(0, halfHeight);\n            let prevX = 0;\n            let max = 0;\n            for(let i = 0; i <= length; i++){\n                const x = Math.round(i * hScale);\n                if (x > prevX) {\n                    const h = Math.round(max * halfHeight * vScale) || 1;\n                    const y = halfHeight + h * (index === 0 ? -1 : 1);\n                    ctx.lineTo(prevX, y);\n                    prevX = x;\n                    max = 0;\n                }\n                const value = Math.abs(channel[i] || 0);\n                if (value > max) max = value;\n            }\n            ctx.lineTo(prevX, halfHeight);\n        };\n        ctx.beginPath();\n        drawChannel(0);\n        drawChannel(1);\n        ctx.fill();\n        ctx.closePath();\n    }\n    renderWaveform(channelData, options, ctx) {\n        ctx.fillStyle = this.convertColorValues(options.waveColor);\n        // Custom rendering function\n        if (options.renderFunction) {\n            options.renderFunction(channelData, ctx);\n            return;\n        }\n        // Vertical scaling\n        let vScale = options.barHeight || 1;\n        if (options.normalize) {\n            const max = Array.from(channelData[0]).reduce((max, value)=>Math.max(max, Math.abs(value)), 0);\n            vScale = max ? 1 / max : 1;\n        }\n        // Render waveform as bars\n        if (options.barWidth || options.barGap || options.barAlign) {\n            this.renderBarWaveform(channelData, options, ctx, vScale);\n            return;\n        }\n        // Render waveform as a polyline\n        this.renderLineWaveform(channelData, options, ctx, vScale);\n    }\n    renderSingleCanvas(channelData, options, width, height, start, end, canvasContainer, progressContainer) {\n        const pixelRatio = window.devicePixelRatio || 1;\n        const canvas = document.createElement(\"canvas\");\n        const length = channelData[0].length;\n        canvas.width = Math.round(width * (end - start) / length);\n        canvas.height = height * pixelRatio;\n        canvas.style.width = `${Math.floor(canvas.width / pixelRatio)}px`;\n        canvas.style.height = `${height}px`;\n        canvas.style.left = `${Math.floor(start * width / pixelRatio / length)}px`;\n        canvasContainer.appendChild(canvas);\n        const ctx = canvas.getContext(\"2d\");\n        this.renderWaveform(channelData.map((channel)=>channel.slice(start, end)), options, ctx);\n        // Draw a progress canvas\n        if (canvas.width > 0 && canvas.height > 0) {\n            const progressCanvas = canvas.cloneNode();\n            const progressCtx = progressCanvas.getContext(\"2d\");\n            progressCtx.drawImage(canvas, 0, 0);\n            // Set the composition method to draw only where the waveform is drawn\n            progressCtx.globalCompositeOperation = \"source-in\";\n            progressCtx.fillStyle = this.convertColorValues(options.progressColor);\n            // This rectangle acts as a mask thanks to the composition method\n            progressCtx.fillRect(0, 0, canvas.width, canvas.height);\n            progressContainer.appendChild(progressCanvas);\n        }\n    }\n    renderChannel(channelData, options, width) {\n        // A container for canvases\n        const canvasContainer = document.createElement(\"div\");\n        const height = this.getHeight();\n        canvasContainer.style.height = `${height}px`;\n        this.canvasWrapper.style.minHeight = `${height}px`;\n        this.canvasWrapper.appendChild(canvasContainer);\n        // A container for progress canvases\n        const progressContainer = canvasContainer.cloneNode();\n        this.progressWrapper.appendChild(progressContainer);\n        // Determine the currently visible part of the waveform\n        const { scrollLeft, scrollWidth, clientWidth } = this.scrollContainer;\n        const len = channelData[0].length;\n        const scale = len / scrollWidth;\n        let viewportWidth = Math.min(Renderer.MAX_CANVAS_WIDTH, clientWidth);\n        // Adjust width to avoid gaps between canvases when using bars\n        if (options.barWidth || options.barGap) {\n            const barWidth = options.barWidth || 0.5;\n            const barGap = options.barGap || barWidth / 2;\n            const totalBarWidth = barWidth + barGap;\n            if (viewportWidth % totalBarWidth !== 0) {\n                viewportWidth = Math.floor(viewportWidth / totalBarWidth) * totalBarWidth;\n            }\n        }\n        const start = Math.floor(Math.abs(scrollLeft) * scale);\n        const end = Math.floor(start + viewportWidth * scale);\n        const viewportLen = end - start;\n        // Draw a portion of the waveform from start peak to end peak\n        const draw = (start, end)=>{\n            this.renderSingleCanvas(channelData, options, width, height, Math.max(0, start), Math.min(end, len), canvasContainer, progressContainer);\n        };\n        // Draw the waveform in viewport chunks, each with a delay\n        const headDelay = this.createDelay();\n        const tailDelay = this.createDelay();\n        const renderHead = (fromIndex, toIndex)=>{\n            draw(fromIndex, toIndex);\n            if (fromIndex > 0) {\n                headDelay(()=>{\n                    renderHead(fromIndex - viewportLen, toIndex - viewportLen);\n                });\n            }\n        };\n        const renderTail = (fromIndex, toIndex)=>{\n            draw(fromIndex, toIndex);\n            if (toIndex < len) {\n                tailDelay(()=>{\n                    renderTail(fromIndex + viewportLen, toIndex + viewportLen);\n                });\n            }\n        };\n        renderHead(start, end);\n        if (end < len) {\n            renderTail(end, end + viewportLen);\n        }\n    }\n    render(audioData) {\n        // Clear previous timeouts\n        this.timeouts.forEach((context)=>context.timeout && clearTimeout(context.timeout));\n        this.timeouts = [];\n        // Clear the canvases\n        this.canvasWrapper.innerHTML = \"\";\n        this.progressWrapper.innerHTML = \"\";\n        this.wrapper.style.width = \"\";\n        // Width\n        if (this.options.width != null) {\n            this.scrollContainer.style.width = typeof this.options.width === \"number\" ? `${this.options.width}px` : this.options.width;\n        }\n        // Determine the width of the waveform\n        const pixelRatio = window.devicePixelRatio || 1;\n        const parentWidth = this.scrollContainer.clientWidth;\n        const scrollWidth = Math.ceil(audioData.duration * (this.options.minPxPerSec || 0));\n        // Whether the container should scroll\n        this.isScrolling = scrollWidth > parentWidth;\n        const useParentWidth = this.options.fillParent && !this.isScrolling;\n        // Width of the waveform in pixels\n        const width = (useParentWidth ? parentWidth : scrollWidth) * pixelRatio;\n        // Set the width of the wrapper\n        this.wrapper.style.width = useParentWidth ? \"100%\" : `${scrollWidth}px`;\n        // Set additional styles\n        this.scrollContainer.style.overflowX = this.isScrolling ? \"auto\" : \"hidden\";\n        this.scrollContainer.classList.toggle(\"noScrollbar\", !!this.options.hideScrollbar);\n        this.cursor.style.backgroundColor = `${this.options.cursorColor || this.options.progressColor}`;\n        this.cursor.style.width = `${this.options.cursorWidth}px`;\n        // Render the waveform\n        if (this.options.splitChannels) {\n            // Render a waveform for each channel\n            for(let i = 0; i < audioData.numberOfChannels; i++){\n                const options = Object.assign(Object.assign({}, this.options), this.options.splitChannels[i]);\n                this.renderChannel([\n                    audioData.getChannelData(i)\n                ], options, width);\n            }\n        } else {\n            // Render a single waveform for the first two channels (left and right)\n            const channels = [\n                audioData.getChannelData(0)\n            ];\n            if (audioData.numberOfChannels > 1) channels.push(audioData.getChannelData(1));\n            this.renderChannel(channels, this.options, width);\n        }\n        this.audioData = audioData;\n        this.emit(\"render\");\n    }\n    reRender() {\n        // Return if the waveform has not been rendered yet\n        if (!this.audioData) return;\n        // Remember the current cursor position\n        const oldCursorPosition = this.progressWrapper.clientWidth;\n        // Set the new zoom level and re-render the waveform\n        this.render(this.audioData);\n        // Adjust the scroll position so that the cursor stays in the same place\n        const newCursortPosition = this.progressWrapper.clientWidth;\n        this.scrollContainer.scrollLeft += newCursortPosition - oldCursorPosition;\n    }\n    zoom(minPxPerSec) {\n        this.options.minPxPerSec = minPxPerSec;\n        this.reRender();\n    }\n    scrollIntoView(progress, isPlaying = false) {\n        const { clientWidth, scrollLeft, scrollWidth } = this.scrollContainer;\n        const progressWidth = scrollWidth * progress;\n        const center = clientWidth / 2;\n        const minScroll = isPlaying && this.options.autoCenter && !this.isDragging ? center : clientWidth;\n        if (progressWidth > scrollLeft + minScroll || progressWidth < scrollLeft) {\n            // Scroll to the center\n            if (this.options.autoCenter && !this.isDragging) {\n                // If the cursor is in viewport but not centered, scroll to the center slowly\n                const minDiff = center / 20;\n                if (progressWidth - (scrollLeft + center) >= minDiff && progressWidth < scrollLeft + clientWidth) {\n                    this.scrollContainer.scrollLeft += minDiff;\n                } else {\n                    // Otherwise, scroll to the center immediately\n                    this.scrollContainer.scrollLeft = progressWidth - center;\n                }\n            } else if (this.isDragging) {\n                // Scroll just a little bit to allow for some space between the cursor and the edge\n                const gap = 10;\n                this.scrollContainer.scrollLeft = progressWidth < scrollLeft ? progressWidth - gap : progressWidth - clientWidth + gap;\n            } else {\n                // Scroll to the beginning\n                this.scrollContainer.scrollLeft = progressWidth;\n            }\n        }\n        // Emit the scroll event\n        {\n            const { scrollLeft } = this.scrollContainer;\n            const startX = scrollLeft / scrollWidth;\n            const endX = (scrollLeft + clientWidth) / scrollWidth;\n            this.emit(\"scroll\", startX, endX);\n        }\n    }\n    renderProgress(progress, isPlaying) {\n        if (isNaN(progress)) return;\n        const percents = progress * 100;\n        this.canvasWrapper.style.clipPath = `polygon(${percents}% 0, 100% 0, 100% 100%, ${percents}% 100%)`;\n        this.progressWrapper.style.width = `${percents}%`;\n        this.cursor.style.left = `${percents}%`;\n        this.cursor.style.marginLeft = Math.round(percents) === 100 ? `-${this.options.cursorWidth}px` : \"\";\n        if (this.isScrolling && this.options.autoScroll) {\n            this.scrollIntoView(progress, isPlaying);\n        }\n    }\n}\nRenderer.MAX_CANVAS_WIDTH = 4000;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Renderer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/renderer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/timer.js":
/*!**************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/timer.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _event_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-emitter.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/event-emitter.js\");\n\nclass Timer extends _event_emitter_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(){\n        super(...arguments);\n        this.unsubscribe = ()=>undefined;\n    }\n    start() {\n        this.unsubscribe = this.on(\"tick\", ()=>{\n            requestAnimationFrame(()=>{\n                this.emit(\"tick\");\n            });\n        });\n        this.emit(\"tick\");\n    }\n    stop() {\n        this.unsubscribe();\n    }\n    destroy() {\n        this.unsubscribe();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Timer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L3RpbWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDO0FBQzlDLE1BQU1DLGNBQWNELHlEQUFZQTtJQUM1QkUsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFNQztJQUM3QjtJQUNBQyxRQUFRO1FBQ0osSUFBSSxDQUFDRixXQUFXLEdBQUcsSUFBSSxDQUFDRyxFQUFFLENBQUMsUUFBUTtZQUMvQkMsc0JBQXNCO2dCQUNsQixJQUFJLENBQUNDLElBQUksQ0FBQztZQUNkO1FBQ0o7UUFDQSxJQUFJLENBQUNBLElBQUksQ0FBQztJQUNkO0lBQ0FDLE9BQU87UUFDSCxJQUFJLENBQUNOLFdBQVc7SUFDcEI7SUFDQU8sVUFBVTtRQUNOLElBQUksQ0FBQ1AsV0FBVztJQUNwQjtBQUNKO0FBQ0EsaUVBQWVILEtBQUtBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbG9uZS13aGF0c2FwcC8uL25vZGVfbW9kdWxlcy93YXZlc3VyZmVyLmpzL2Rpc3QvdGltZXIuanM/ZGM3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vZXZlbnQtZW1pdHRlci5qcyc7XG5jbGFzcyBUaW1lciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5vbigndGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCd0aWNrJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZW1pdCgndGljaycpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBUaW1lcjtcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJUaW1lciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwidW5zdWJzY3JpYmUiLCJ1bmRlZmluZWQiLCJzdGFydCIsIm9uIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZW1pdCIsInN0b3AiLCJkZXN0cm95Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/timer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/wavesurfer.js":
/*!*******************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/wavesurfer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _decoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decoder.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/decoder.js\");\n/* harmony import */ var _fetcher_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fetcher.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/fetcher.js\");\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/player.js\");\n/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/renderer.js\");\n/* harmony import */ var _timer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./timer.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/timer.js\");\n/* harmony import */ var _webaudio_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webaudio.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/webaudio.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nconst defaultOptions = {\n    waveColor: \"#999\",\n    progressColor: \"#555\",\n    cursorWidth: 1,\n    minPxPerSec: 0,\n    fillParent: true,\n    interact: true,\n    dragToSeek: false,\n    autoScroll: true,\n    autoCenter: true,\n    sampleRate: 8000\n};\nclass WaveSurfer extends _player_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Create a new WaveSurfer instance */ static create(options) {\n        return new WaveSurfer(options);\n    }\n    /** Create a new WaveSurfer instance */ constructor(options){\n        const media = options.media || (options.backend === \"WebAudio\" ? new _webaudio_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]() : undefined);\n        super({\n            media,\n            mediaControls: options.mediaControls,\n            autoplay: options.autoplay,\n            playbackRate: options.audioRate\n        });\n        this.plugins = [];\n        this.decodedData = null;\n        this.subscriptions = [];\n        this.mediaSubscriptions = [];\n        this.options = Object.assign({}, defaultOptions, options);\n        this.timer = new _timer_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        const audioElement = media ? undefined : this.getMediaElement();\n        this.renderer = new _renderer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.options, audioElement);\n        this.initPlayerEvents();\n        this.initRendererEvents();\n        this.initTimerEvents();\n        this.initPlugins();\n        // Load audio if URL or an external media with an src is passed,\n        // of render w/o audio if pre-decoded peaks and duration are provided\n        const url = this.options.url || this.getSrc() || \"\";\n        if (url || this.options.peaks && this.options.duration) {\n            this.load(url, this.options.peaks, this.options.duration);\n        }\n    }\n    initTimerEvents() {\n        // The timer fires every 16ms for a smooth progress animation\n        this.subscriptions.push(this.timer.on(\"tick\", ()=>{\n            const currentTime = this.getCurrentTime();\n            this.renderer.renderProgress(currentTime / this.getDuration(), true);\n            this.emit(\"timeupdate\", currentTime);\n            this.emit(\"audioprocess\", currentTime);\n        }));\n    }\n    initPlayerEvents() {\n        if (this.isPlaying()) {\n            this.emit(\"play\");\n            this.timer.start();\n        }\n        this.mediaSubscriptions.push(this.onMediaEvent(\"timeupdate\", ()=>{\n            const currentTime = this.getCurrentTime();\n            this.renderer.renderProgress(currentTime / this.getDuration(), this.isPlaying());\n            this.emit(\"timeupdate\", currentTime);\n        }), this.onMediaEvent(\"play\", ()=>{\n            this.emit(\"play\");\n            this.timer.start();\n        }), this.onMediaEvent(\"pause\", ()=>{\n            this.emit(\"pause\");\n            this.timer.stop();\n        }), this.onMediaEvent(\"emptied\", ()=>{\n            this.timer.stop();\n        }), this.onMediaEvent(\"ended\", ()=>{\n            this.emit(\"finish\");\n        }), this.onMediaEvent(\"seeking\", ()=>{\n            this.emit(\"seeking\", this.getCurrentTime());\n        }));\n    }\n    initRendererEvents() {\n        this.subscriptions.push(// Seek on click\n        this.renderer.on(\"click\", (relativeX, relativeY)=>{\n            if (this.options.interact) {\n                this.seekTo(relativeX);\n                this.emit(\"interaction\", relativeX * this.getDuration());\n                this.emit(\"click\", relativeX, relativeY);\n            }\n        }), // Double click\n        this.renderer.on(\"dblclick\", (relativeX, relativeY)=>{\n            this.emit(\"dblclick\", relativeX, relativeY);\n        }), // Scroll\n        this.renderer.on(\"scroll\", (startX, endX)=>{\n            const duration = this.getDuration();\n            this.emit(\"scroll\", startX * duration, endX * duration);\n        }), // Redraw\n        this.renderer.on(\"render\", ()=>{\n            this.emit(\"redraw\");\n        }));\n        // Drag\n        {\n            let debounce;\n            this.subscriptions.push(this.renderer.on(\"drag\", (relativeX)=>{\n                if (!this.options.interact) return;\n                // Update the visual position\n                this.renderer.renderProgress(relativeX);\n                // Set the audio position with a debounce\n                clearTimeout(debounce);\n                debounce = setTimeout(()=>{\n                    this.seekTo(relativeX);\n                }, this.isPlaying() ? 0 : 200);\n                this.emit(\"interaction\", relativeX * this.getDuration());\n                this.emit(\"drag\", relativeX);\n            }));\n        }\n    }\n    initPlugins() {\n        var _a;\n        if (!((_a = this.options.plugins) === null || _a === void 0 ? void 0 : _a.length)) return;\n        this.options.plugins.forEach((plugin)=>{\n            this.registerPlugin(plugin);\n        });\n    }\n    unsubscribePlayerEvents() {\n        this.mediaSubscriptions.forEach((unsubscribe)=>unsubscribe());\n        this.mediaSubscriptions = [];\n    }\n    /** Set new wavesurfer options and re-render it */ setOptions(options) {\n        this.options = Object.assign({}, this.options, options);\n        this.renderer.setOptions(this.options);\n        if (options.audioRate) {\n            this.setPlaybackRate(options.audioRate);\n        }\n        if (options.mediaControls != null) {\n            this.getMediaElement().controls = options.mediaControls;\n        }\n    }\n    /** Register a wavesurfer.js plugin */ registerPlugin(plugin) {\n        plugin.init(this);\n        this.plugins.push(plugin);\n        // Unregister plugin on destroy\n        this.subscriptions.push(plugin.once(\"destroy\", ()=>{\n            this.plugins = this.plugins.filter((p)=>p !== plugin);\n        }));\n        return plugin;\n    }\n    /** For plugins only: get the waveform wrapper div */ getWrapper() {\n        return this.renderer.getWrapper();\n    }\n    /** Get the current scroll position in pixels */ getScroll() {\n        return this.renderer.getScroll();\n    }\n    /** Get all registered plugins */ getActivePlugins() {\n        return this.plugins;\n    }\n    loadAudio(url, blob, channelData, duration) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.emit(\"load\", url);\n            if (!this.options.media && this.isPlaying()) this.pause();\n            this.decodedData = null;\n            // Fetch the entire audio as a blob if pre-decoded data is not provided\n            if (!blob && !channelData) {\n                const onProgress = (percentage)=>this.emit(\"loading\", percentage);\n                blob = yield _fetcher_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fetchBlob(url, onProgress, this.options.fetchParams);\n            }\n            // Set the mediaelement source\n            this.setSrc(url, blob);\n            // Wait for the audio duration\n            // It should be a promise to allow event listeners to subscribe to the ready and decode events\n            const audioDuration = (yield Promise.resolve(duration || this.getDuration())) || (yield new Promise((resolve)=>{\n                this.onceMediaEvent(\"loadedmetadata\", ()=>resolve(this.getDuration()));\n            }));\n            // Decode the audio data or use user-provided peaks\n            if (channelData) {\n                this.decodedData = _decoder_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createBuffer(channelData, audioDuration || 0);\n            } else if (blob) {\n                const arrayBuffer = yield blob.arrayBuffer();\n                this.decodedData = yield _decoder_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode(arrayBuffer, this.options.sampleRate);\n            }\n            if (this.decodedData) {\n                this.emit(\"decode\", this.getDuration());\n                this.renderer.render(this.decodedData);\n            }\n            this.emit(\"ready\", this.getDuration());\n        });\n    }\n    /** Load an audio file by URL, with optional pre-decoded audio data */ load(url, channelData, duration) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.loadAudio(url, undefined, channelData, duration);\n        });\n    }\n    /** Load an audio blob */ loadBlob(blob, channelData, duration) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.loadAudio(\"blob\", blob, channelData, duration);\n        });\n    }\n    /** Zoom the waveform by a given pixels-per-second factor */ zoom(minPxPerSec) {\n        if (!this.decodedData) {\n            throw new Error(\"No audio loaded\");\n        }\n        this.renderer.zoom(minPxPerSec);\n        this.emit(\"zoom\", minPxPerSec);\n    }\n    /** Get the decoded audio data */ getDecodedData() {\n        return this.decodedData;\n    }\n    /** Get decoded peaks */ exportPeaks({ channels = 2, maxLength = 8000, precision = 10000 } = {}) {\n        if (!this.decodedData) {\n            throw new Error(\"The audio has not been decoded yet\");\n        }\n        const maxChannels = Math.min(channels, this.decodedData.numberOfChannels);\n        const peaks = [];\n        for(let i = 0; i < maxChannels; i++){\n            const channel = this.decodedData.getChannelData(i);\n            const data = [];\n            const sampleSize = Math.round(channel.length / maxLength);\n            for(let i = 0; i < maxLength; i++){\n                const sample = channel.slice(i * sampleSize, (i + 1) * sampleSize);\n                let max = 0;\n                for(let x = 0; x < sample.length; x++){\n                    const n = sample[x];\n                    if (Math.abs(n) > Math.abs(max)) max = n;\n                }\n                data.push(Math.round(max * precision) / precision);\n            }\n            peaks.push(data);\n        }\n        return peaks;\n    }\n    /** Get the duration of the audio in seconds */ getDuration() {\n        let duration = super.getDuration() || 0;\n        // Fall back to the decoded data duration if the media duration is incorrect\n        if ((duration === 0 || duration === Infinity) && this.decodedData) {\n            duration = this.decodedData.duration;\n        }\n        return duration;\n    }\n    /** Toggle if the waveform should react to clicks */ toggleInteraction(isInteractive) {\n        this.options.interact = isInteractive;\n    }\n    /** Seek to a percentage of audio as [0..1] (0 = beginning, 1 = end) */ seekTo(progress) {\n        const time = this.getDuration() * progress;\n        this.setTime(time);\n    }\n    /** Play or pause the audio */ playPause() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.isPlaying() ? this.pause() : this.play();\n        });\n    }\n    /** Stop the audio and go to the beginning */ stop() {\n        this.pause();\n        this.setTime(0);\n    }\n    /** Skip N or -N seconds from the current position */ skip(seconds) {\n        this.setTime(this.getCurrentTime() + seconds);\n    }\n    /** Empty the waveform */ empty() {\n        this.load(\"\", [\n            [\n                0\n            ]\n        ], 0.001);\n    }\n    /** Set HTML media element */ setMediaElement(element) {\n        this.unsubscribePlayerEvents();\n        super.setMediaElement(element);\n        this.initPlayerEvents();\n    }\n    /** Unmount wavesurfer */ destroy() {\n        this.emit(\"destroy\");\n        this.plugins.forEach((plugin)=>plugin.destroy());\n        this.subscriptions.forEach((unsubscribe)=>unsubscribe());\n        this.unsubscribePlayerEvents();\n        this.timer.destroy();\n        this.renderer.destroy();\n        super.destroy();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WaveSurfer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/wavesurfer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/webaudio.js":
/*!*****************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/webaudio.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _event_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-emitter.js */ \"(ssr)/./node_modules/wavesurfer.js/dist/event-emitter.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n/**\n * A Web Audio buffer player emulating the behavior of an HTML5 Audio element.\n */ class WebAudioPlayer extends _event_emitter_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(audioContext = new AudioContext()){\n        super();\n        this.bufferNode = null;\n        this.autoplay = false;\n        this.playStartTime = 0;\n        this.playedDuration = 0;\n        this._muted = false;\n        this.buffer = null;\n        this.currentSrc = \"\";\n        this.paused = true;\n        this.crossOrigin = null;\n        this.audioContext = audioContext;\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.connect(this.audioContext.destination);\n    }\n    load() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return;\n        });\n    }\n    get src() {\n        return this.currentSrc;\n    }\n    set src(value) {\n        this.currentSrc = value;\n        fetch(value).then((response)=>response.arrayBuffer()).then((arrayBuffer)=>this.audioContext.decodeAudioData(arrayBuffer)).then((audioBuffer)=>{\n            this.buffer = audioBuffer;\n            this.emit(\"loadedmetadata\");\n            this.emit(\"canplay\");\n            if (this.autoplay) this.play();\n        });\n    }\n    _play() {\n        var _a;\n        if (!this.paused) return;\n        this.paused = false;\n        (_a = this.bufferNode) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this.bufferNode = this.audioContext.createBufferSource();\n        this.bufferNode.buffer = this.buffer;\n        this.bufferNode.connect(this.gainNode);\n        if (this.playedDuration >= this.duration) {\n            this.playedDuration = 0;\n        }\n        this.bufferNode.start(this.audioContext.currentTime, this.playedDuration);\n        this.playStartTime = this.audioContext.currentTime;\n        this.bufferNode.onended = ()=>{\n            if (this.currentTime >= this.duration) {\n                this.pause();\n                this.emit(\"ended\");\n            }\n        };\n    }\n    _pause() {\n        var _a;\n        if (this.paused) return;\n        this.paused = true;\n        (_a = this.bufferNode) === null || _a === void 0 ? void 0 : _a.stop();\n        this.playedDuration += this.audioContext.currentTime - this.playStartTime;\n    }\n    play() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._play();\n            this.emit(\"play\");\n        });\n    }\n    pause() {\n        this._pause();\n        this.emit(\"pause\");\n    }\n    stopAt(timeSeconds) {\n        var _a, _b;\n        const delay = timeSeconds - this.currentTime;\n        (_a = this.bufferNode) === null || _a === void 0 ? void 0 : _a.stop(this.audioContext.currentTime + delay);\n        (_b = this.bufferNode) === null || _b === void 0 ? void 0 : _b.addEventListener(\"ended\", ()=>{\n            this.bufferNode = null;\n            this.pause();\n        }, {\n            once: true\n        });\n    }\n    setSinkId(deviceId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const ac = this.audioContext;\n            return ac.setSinkId(deviceId);\n        });\n    }\n    get playbackRate() {\n        var _a, _b;\n        return (_b = (_a = this.bufferNode) === null || _a === void 0 ? void 0 : _a.playbackRate.value) !== null && _b !== void 0 ? _b : 1;\n    }\n    set playbackRate(value) {\n        if (this.bufferNode) {\n            this.bufferNode.playbackRate.value = value;\n        }\n    }\n    get currentTime() {\n        return this.paused ? this.playedDuration : this.playedDuration + this.audioContext.currentTime - this.playStartTime;\n    }\n    set currentTime(value) {\n        this.emit(\"seeking\");\n        if (this.paused) {\n            this.playedDuration = value;\n        } else {\n            this._pause();\n            this.playedDuration = value;\n            this._play();\n        }\n        this.emit(\"timeupdate\");\n    }\n    get duration() {\n        var _a;\n        return ((_a = this.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n    }\n    get volume() {\n        return this.gainNode.gain.value;\n    }\n    set volume(value) {\n        this.gainNode.gain.value = value;\n        this.emit(\"volumechange\");\n    }\n    get muted() {\n        return this._muted;\n    }\n    set muted(value) {\n        if (this._muted === value) return;\n        this._muted = value;\n        if (this._muted) {\n            this.gainNode.disconnect();\n        } else {\n            this.gainNode.connect(this.audioContext.destination);\n        }\n    }\n    /** Get the GainNode used to play the audio. Can be used to attach filters. */ getGainNode() {\n        return this.gainNode;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebAudioPlayer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/webaudio.js\n");

/***/ })

};
;